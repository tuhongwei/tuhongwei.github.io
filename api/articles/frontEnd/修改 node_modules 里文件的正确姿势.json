{"title":"修改 node_modules 里文件的正确姿势","slug":"frontEnd/修改 node_modules 里文件的正确姿势","date":"2021-04-06T08:59:46.000Z","updated":"2022-04-05T16:05:50.524Z","comments":true,"path":"api/articles/frontEnd/修改 node_modules 里文件的正确姿势.json","excerpt":null,"covers":["/images/blog/modify-node_modules/screenshot1.jpg","/images/blog/modify-node_modules/screenshot2.jpg","/images/blog/modify-node_modules/screenshot3.png","/images/blog/modify-node_modules/screenshot4.jpg","/images/blog/modify-node_modules/screenshot5.png","/images/blog/modify-node_modules/screenshot6.jpg","/images/blog/modify-node_modules/screenshot7.jpg","/images/blog/modify-node_modules/screenshot8.jpg","/images/blog/modify-node_modules/screenshot9.jpg","/images/blog/modify-node_modules/screenshot10.jpg","/images/blog/modify-node_modules/screenshot11.jpg","/images/blog/modify-node_modules/screenshot12.jpg","/images/blog/modify-node_modules/screenshot13.jpg","/images/blog/modify-node_modules/screenshot14.jpg"],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在开发的时候经常会遇到这种情况：</p>\n<ol>\n<li>所依赖的 npm 包有 bug，别人一时半会更新不了</li>\n<li>不满足自己的需求（比如一些 UI 框架），需要修改某些部分</li>\n</ol>\n<p>那么这个时候我们就要去修改 node_modules 里面的源码，直接修改会导致两个问题：</p>\n<p>第一，更新问题，重新安装之后，修改的文件会被覆盖</p>\n<p>第二，同步问题，node_modules 里的文件一般是不提交到代码库的，那如何让团队其他成员也能同步更新呢？你总不能每次改完之后都手动发给其他人吧。</p>\n<p>你可能首先想到的解决办法有这样两个：</p>\n<ol>\n<li>把别人代码全部复制到自己的 src 目录，修改完之后引入</li>\n<li>把别人代码下载到本地，修改完之后重新发布为一个包，然后再安装自己发布的这个包</li>\n</ol>\n<p>但这两个解决办法都有上述提到的更新问题，当这个依赖包有更新时，没法自动同步更新。而且我们引入依赖包的时候，往往引入的是编译之后的代码，这样会导致每次修改完代码之后，还得自己手动编译，很麻烦，那有没有其他更好的解决办法呢？答案是肯定的。我想到的有这样几个解决办法，我们来逐一分析一下。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p><strong>以下所有解决方案都以 request 包为例进行演示。</strong></p>\n<h3 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h3><p>npm link 相当于建立一个软连接，将我们依赖的包链接到我们修改之后的包，这个在调试本地包的时候经常会用到，下面我们来实际操作一下。</p>\n<ol>\n<li>fork request 的仓库到自己的仓库，我这里命名为 request-study</li>\n<li>clone 到本地</li>\n<li>进入到 request-study 目录，执行 <code>npm link</code></li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot1.jpg\" alt=\"screenshot1\"></p>\n<ol start=\"4\">\n<li><p>进入到我们的工程目录，执行 <code>npm link request</code></p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot2.jpg\" alt=\"screenshot2\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>修改包文件里面的代码，这里我们修改的目录是 request-study/lib/auth.js</li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot3.png\" alt=\"screenshot3\"></p>\n<p>这样当包里面的文件更新的时候会自动同步到工程项目里面，解决了上述更新的问题。不足的一个地方是当依赖包有更新时，团队其他成员也需要拉取最新的依赖包代码。</p>\n<h3 id=\"webpack-alias\"><a href=\"#webpack-alias\" class=\"headerlink\" title=\"webpack alias\"></a>webpack alias</h3><p>webpack alias 的作用是配置别名，比如像这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>        \n    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>alias        \t\t\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>        \t\t\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request/a'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所以我们可以利用 webpack alias 将需要修改的文件代理到我们自己的项目文件中，操作步骤如下：</p>\n<ol>\n<li>找到别人源码里面的需要修改的文件，复制到 src 目录</li>\n<li>修改代码，注意里面引用其他的文件路径都需要改成绝对路径</li>\n<li>找到这个模块被引入的路径（<strong>我们需要拦截的路径</strong>）</li>\n<li>配置 webpack alias</li>\n</ol>\n<p>我们来实际操作一下。</p>\n<p>我们修改的文件如下：</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot4.jpg\" alt=\"screenshot4\"></p>\n<p>文件被引用的路径为 ./lib/auth  （我们要拦截的路径） </p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot5.png\" alt=\"screenshot5\"></p>\n<p>将 auth.js 文件复制到  src/assets/auth.js，将 require 路径中引入为当前request包的路径修改为绝对路径，并添加我们的代码</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot6.jpg\" alt=\"screenshot6\"></p>\n<p>配置 webpack alias （我这里用的是 vue-cli4， 配置文件是 vue.config.js），配置代码为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>alias\n      <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/auth'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/assets/auth.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>启动我们的项目，控制台打印出我们添加的代码，表明我们的代码添加成功。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot7.jpg\" alt=\"screenshot7\"></p>\n<p>当依赖包的代码有更新时，我们也能同步更新，团队其他成员同步修改的代码时也不需要做其它额外的操作。不足的一个地方是当我们修改的依赖包是在配置文件中（比如 vue.config.js）引入时，这个不会生效。</p>\n<h3 id=\"yarn-patch\"><a href=\"#yarn-patch\" class=\"headerlink\" title=\"yarn patch\"></a>yarn patch</h3><p>这个需要用到 v2 版本的 yarn，具体步骤如下：</p>\n<ol>\n<li>全局安装 Yarn 的最新版本：<code>npm install -g yarn</code> ，这里说明一下，如果你之前安装的是应用程序版本，需要先卸载之后再运行这个命令，不然安装完成之后还是之前的 yarn 版本。</li>\n<li>进入你的项目目录，运行 <code>yarn set version berry</code> 命令。</li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot8.jpg\" alt=\"screenshot8\"></p>\n<ol start=\"3\">\n<li><p>执行 <code>yarn patch request</code> 命令</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot9.jpg\" alt=\"screenshot9\"></p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>在如上图所示文件路径中修改代码</p>\n</li>\n<li><p>在你的项目根目录新建一个 patches 文件夹，执行 <code>yarn patch-commit C:\\Users\\TWITTY~1\\AppData\\Local\\Temp\\xfs-f6241b39 &gt; E:\\vue-cli4\\patches\\request+2.88.2.patch</code>，这样你就能在 patches 文件下看到生成了一个 request+2.88.2.patch 文件，里面保存有你刚才修改代码的 diff 内容。</p>\n</li>\n<li><p>修改package.json 文件如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">- <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.88.2\"</span> \n+ <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"patch:request@^2.88.2#./patches/request+2.88.2.patch\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>重新运行 yarn 和 启动项目，你就能看到依赖包代码修改之后的变化</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot10.jpg\" alt=\"screenshot10\"></p>\n</li>\n</ol>\n<p>这种办法解决了上述更新和团队成员同步问题，缺点是操作起来比较繁琐，还得依赖 v2 版本的 yarn。</p>\n<h3 id=\"yarn-patch-可能出现的问题：\"><a href=\"#yarn-patch-可能出现的问题：\" class=\"headerlink\" title=\"yarn patch 可能出现的问题：\"></a>yarn patch 可能出现的问题：</h3><ol>\n<li><p>运行 <code>yarn set version berry</code> 时，如果出现类似以下这种错误</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot11.jpg\" alt=\"screenshot11\"></p>\n<p>则可能需要用代理，命令行配置代理方法如下：</p>\n<p>windows： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>mac：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>运行 <code>yarn patch request</code> 命令时，如果出现以下这种情况，则需要删除 yarn.lock 文件，重新执行 <code>yarn install</code>。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot12.jpg\" alt=\"screenshot12\"></p>\n<p>具体可以参考我的另一篇文章—记录一次使用 yarn patch 遇到的问题。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>运行 <code>yarn patch request</code> 命令时，如果出现以下这种情况，说明有多个版本的包共存，你可以选择你具体要修改的那个包版本，比如我想修改的是 request 的2.88.2 版本，就执行 <code>yarn patch request@npm:2.88.2</code>。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot13.jpg\" alt=\"screenshot13\"></p>\n</li>\n</ol>\n<h3 id=\"patch-package\"><a href=\"#patch-package\" class=\"headerlink\" title=\"patch-package\"></a>patch-package</h3><p>操作步骤如下：</p>\n<ol>\n<li><p>修改package.json 文件如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n+ <span class=\"token property\">\"postinstall\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"patch-package\"</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装 patch-package：  <code>npm i patch-package -S</code></p>\n</li>\n<li><p>在 node_modules 里面修改依赖包的代码</p>\n</li>\n<li><p>每次修改代码之后执行命令  <code>npx patch-package request</code> </p>\n</li>\n</ol>\n<p>最终会在项目根目录生成一个 patches 文件夹，里面保存着修改过的文件记录。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot14.jpg\" alt=\"screenshot14\"></p>\n<p>你可能已经看到了，这种解决办法和 yarn patch 很像。是的，patch-package 可以看作是 yarn patch 的简化版，它相当于封装了 yarn patch 繁琐的操作。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我们总结一下四种方法：</p>\n<p>npm link 团队其他成员更新时需要同时更新修改依赖包；</p>\n<p>webpack alias 不适用配置文件依赖的包；</p>\n<p>yarn patch 需要将 yarn 升级到 v2 版本，操作步骤多；</p>\n<p>patch-package 可以看做是 yarn patch 的一种替代方案，简化了 yarn patch 的很多操作，是一个比较理想的解决方案。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>码字不易，如果觉得对你有点帮助的话，还请动动你可爱的小指，帮忙点个赞；</p>\n<p>如果你还有其他解决办法或者问题，也欢迎留言交流。</p>\n<p>参考资料： </p>\n<p><a href=\"https://juejin.cn/post/6844904163558555662\">https://juejin.cn/post/6844904163558555662</a></p>\n<p><a href=\"https://yarnpkg.com/\">https://yarnpkg.com</a></p>\n","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>我们在开发的时候经常会遇到这种情况：</p>\n<ol>\n<li>所依赖的 npm 包有 bug，别人一时半会更新不了</li>\n<li>不满足自己的需求（比如一些 UI 框架），需要修改某些部分</li>\n</ol>\n<p>那么这个时候我们就要去修改 node_modules 里面的源码，直接修改会导致两个问题：</p>\n<p>第一，更新问题，重新安装之后，修改的文件会被覆盖</p>\n<p>第二，同步问题，node_modules 里的文件一般是不提交到代码库的，那如何让团队其他成员也能同步更新呢？你总不能每次改完之后都手动发给其他人吧。</p>\n<p>你可能首先想到的解决办法有这样两个：</p>\n<ol>\n<li>把别人代码全部复制到自己的 src 目录，修改完之后引入</li>\n<li>把别人代码下载到本地，修改完之后重新发布为一个包，然后再安装自己发布的这个包</li>\n</ol>\n<p>但这两个解决办法都有上述提到的更新问题，当这个依赖包有更新时，没法自动同步更新。而且我们引入依赖包的时候，往往引入的是编译之后的代码，这样会导致每次修改完代码之后，还得自己手动编译，很麻烦，那有没有其他更好的解决办法呢？答案是肯定的。我想到的有这样几个解决办法，我们来逐一分析一下。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p><strong>以下所有解决方案都以 request 包为例进行演示。</strong></p>\n<h3 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h3><p>npm link 相当于建立一个软连接，将我们依赖的包链接到我们修改之后的包，这个在调试本地包的时候经常会用到，下面我们来实际操作一下。</p>\n<ol>\n<li>fork request 的仓库到自己的仓库，我这里命名为 request-study</li>\n<li>clone 到本地</li>\n<li>进入到 request-study 目录，执行 <code>npm link</code></li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot1.jpg\" alt=\"screenshot1\"></p>\n<ol start=\"4\">\n<li><p>进入到我们的工程目录，执行 <code>npm link request</code></p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot2.jpg\" alt=\"screenshot2\"></p>\n</li>\n</ol>\n<ol start=\"5\">\n<li>修改包文件里面的代码，这里我们修改的目录是 request-study/lib/auth.js</li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot3.png\" alt=\"screenshot3\"></p>\n<p>这样当包里面的文件更新的时候会自动同步到工程项目里面，解决了上述更新的问题。不足的一个地方是当依赖包有更新时，团队其他成员也需要拉取最新的依赖包代码。</p>\n<h3 id=\"webpack-alias\"><a href=\"#webpack-alias\" class=\"headerlink\" title=\"webpack alias\"></a>webpack alias</h3><p>webpack alias 的作用是配置别名，比如像这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>        \n    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>alias        \t\t\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>        \t\t\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request/a'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所以我们可以利用 webpack alias 将需要修改的文件代理到我们自己的项目文件中，操作步骤如下：</p>\n<ol>\n<li>找到别人源码里面的需要修改的文件，复制到 src 目录</li>\n<li>修改代码，注意里面引用其他的文件路径都需要改成绝对路径</li>\n<li>找到这个模块被引入的路径（<strong>我们需要拦截的路径</strong>）</li>\n<li>配置 webpack alias</li>\n</ol>\n<p>我们来实际操作一下。</p>\n<p>我们修改的文件如下：</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot4.jpg\" alt=\"screenshot4\"></p>\n<p>文件被引用的路径为 ./lib/auth  （我们要拦截的路径） </p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot5.png\" alt=\"screenshot5\"></p>\n<p>将 auth.js 文件复制到  src/assets/auth.js，将 require 路径中引入为当前request包的路径修改为绝对路径，并添加我们的代码</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot6.jpg\" alt=\"screenshot6\"></p>\n<p>配置 webpack alias （我这里用的是 vue-cli4， 配置文件是 vue.config.js），配置代码为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>alias\n      <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/auth'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/assets/auth.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>启动我们的项目，控制台打印出我们添加的代码，表明我们的代码添加成功。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot7.jpg\" alt=\"screenshot7\"></p>\n<p>当依赖包的代码有更新时，我们也能同步更新，团队其他成员同步修改的代码时也不需要做其它额外的操作。不足的一个地方是当我们修改的依赖包是在配置文件中（比如 vue.config.js）引入时，这个不会生效。</p>\n<h3 id=\"yarn-patch\"><a href=\"#yarn-patch\" class=\"headerlink\" title=\"yarn patch\"></a>yarn patch</h3><p>这个需要用到 v2 版本的 yarn，具体步骤如下：</p>\n<ol>\n<li>全局安装 Yarn 的最新版本：<code>npm install -g yarn</code> ，这里说明一下，如果你之前安装的是应用程序版本，需要先卸载之后再运行这个命令，不然安装完成之后还是之前的 yarn 版本。</li>\n<li>进入你的项目目录，运行 <code>yarn set version berry</code> 命令。</li>\n</ol>\n<p><img src=\"/images/blog/modify-node_modules/screenshot8.jpg\" alt=\"screenshot8\"></p>\n<ol start=\"3\">\n<li><p>执行 <code>yarn patch request</code> 命令</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot9.jpg\" alt=\"screenshot9\"></p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>在如上图所示文件路径中修改代码</p>\n</li>\n<li><p>在你的项目根目录新建一个 patches 文件夹，执行 <code>yarn patch-commit C:\\Users\\TWITTY~1\\AppData\\Local\\Temp\\xfs-f6241b39 &gt; E:\\vue-cli4\\patches\\request+2.88.2.patch</code>，这样你就能在 patches 文件下看到生成了一个 request+2.88.2.patch 文件，里面保存有你刚才修改代码的 diff 内容。</p>\n</li>\n<li><p>修改package.json 文件如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">- <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.88.2\"</span> \n+ <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"patch:request@^2.88.2#./patches/request+2.88.2.patch\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>重新运行 yarn 和 启动项目，你就能看到依赖包代码修改之后的变化</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot10.jpg\" alt=\"screenshot10\"></p>\n</li>\n</ol>\n<p>这种办法解决了上述更新和团队成员同步问题，缺点是操作起来比较繁琐，还得依赖 v2 版本的 yarn。</p>\n<h3 id=\"yarn-patch-可能出现的问题：\"><a href=\"#yarn-patch-可能出现的问题：\" class=\"headerlink\" title=\"yarn patch 可能出现的问题：\"></a>yarn patch 可能出现的问题：</h3><ol>\n<li><p>运行 <code>yarn set version berry</code> 时，如果出现类似以下这种错误</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot11.jpg\" alt=\"screenshot11\"></p>\n<p>则可能需要用代理，命令行配置代理方法如下：</p>\n<p>windows： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>mac：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>http://127.0.0.1:1080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>运行 <code>yarn patch request</code> 命令时，如果出现以下这种情况，则需要删除 yarn.lock 文件，重新执行 <code>yarn install</code>。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot12.jpg\" alt=\"screenshot12\"></p>\n<p>具体可以参考我的另一篇文章—记录一次使用 yarn patch 遇到的问题。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>运行 <code>yarn patch request</code> 命令时，如果出现以下这种情况，说明有多个版本的包共存，你可以选择你具体要修改的那个包版本，比如我想修改的是 request 的2.88.2 版本，就执行 <code>yarn patch request@npm:2.88.2</code>。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot13.jpg\" alt=\"screenshot13\"></p>\n</li>\n</ol>\n<h3 id=\"patch-package\"><a href=\"#patch-package\" class=\"headerlink\" title=\"patch-package\"></a>patch-package</h3><p>操作步骤如下：</p>\n<ol>\n<li><p>修改package.json 文件如下：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n+ <span class=\"token property\">\"postinstall\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"patch-package\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装 patch-package：  <code>npm i patch-package -S</code></p>\n</li>\n<li><p>在 node_modules 里面修改依赖包的代码</p>\n</li>\n<li><p>每次修改代码之后执行命令  <code>npx patch-package request</code> </p>\n</li>\n</ol>\n<p>最终会在项目根目录生成一个 patches 文件夹，里面保存着修改过的文件记录。</p>\n<p><img src=\"/images/blog/modify-node_modules/screenshot14.jpg\" alt=\"screenshot14\"></p>\n<p>你可能已经看到了，这种解决办法和 yarn patch 很像。是的，patch-package 可以看作是 yarn patch 的简化版，它相当于封装了 yarn patch 繁琐的操作。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我们总结一下四种方法：</p>\n<p>npm link 团队其他成员更新时需要同时更新修改依赖包；</p>\n<p>webpack alias 不适用配置文件依赖的包；</p>\n<p>yarn patch 需要将 yarn 升级到 v2 版本，操作步骤多；</p>\n<p>patch-package 可以看做是 yarn patch 的一种替代方案，简化了 yarn patch 的很多操作，是一个比较理想的解决方案。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>码字不易，如果觉得对你有点帮助的话，还请动动你可爱的小指，帮忙点个赞；</p>\n<p>如果你还有其他解决办法或者问题，也欢迎留言交流。</p>\n<p>参考资料： </p>\n<p><a href=\"https://juejin.cn/post/6844904163558555662\">https://juejin.cn/post/6844904163558555662</a></p>\n<p><a href=\"https://yarnpkg.com/\">https://yarnpkg.com</a></p>\n","categories":[{"name":"node","path":"api/categories/node.json"}],"tags":[{"name":"Node","path":"api/tags/Node.json"}]}