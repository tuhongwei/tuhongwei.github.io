{"title":"原来深拷贝还可以这么写","slug":"frontEnd/原来深拷贝还可以这么写","date":"2021-01-11T03:10:20.000Z","updated":"2022-04-05T16:05:50.525Z","comments":true,"path":"api/articles/frontEnd/原来深拷贝还可以这么写.json","excerpt":null,"covers":null,"content":"<h3 id=\"1-最基本的\"><a href=\"#1-最基本的\" class=\"headerlink\" title=\"1. 最基本的\"></a>1. 最基本的</h3><h3 id=\"2-JSON-parse-JSON-stringify\"><a href=\"#2-JSON-parse-JSON-stringify\" class=\"headerlink\" title=\"2. JSON.parse + JSON.stringify\"></a>2. JSON.parse + JSON.stringify</h3><h3 id=\"3-解决递归爆栈\"><a href=\"#3-解决递归爆栈\" class=\"headerlink\" title=\"3. 解决递归爆栈\"></a>3. 解决递归爆栈</h3><h3 id=\"4-解决循环引用\"><a href=\"#4-解决循环引用\" class=\"headerlink\" title=\"4. 解决循环引用\"></a>4. 解决循环引用</h3><h3 id=\"5-高性能版\"><a href=\"#5-高性能版\" class=\"headerlink\" title=\"5. 高性能版\"></a>5. 高性能版</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_IMMER</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-immer1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isPlainObject</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>value <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'[object Object]'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> Ctor <span class=\"token operator\">=</span> <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">,</span> <span class=\"token string\">'constructor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> proto<span class=\"token punctuation\">.</span>constructor\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> Ctor <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span>\n    Ctor <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Ctor</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n      <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProxy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">[</span><span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">baseState<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> proxies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> objectTraps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> target\n      <span class=\"token keyword\">return</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">getCopy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 这里的判断用于拿 proxy 的 target</span>\n      <span class=\"token comment\">// 否则直接 copy[key] = newValue 的话外部拿到的对象是个 proxy</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> newValue<span class=\"token punctuation\">[</span><span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> newValue\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getProxy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> data\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> proxies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> objectTraps<span class=\"token punctuation\">)</span>\n      proxies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> proxy\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCopy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>copies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">}</span>\n    copies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> copy\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">finalize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isChange</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> data\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">getCopy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copies'</span><span class=\"token punctuation\">,</span> copies<span class=\"token punctuation\">)</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> copy\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  info<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'yck'</span><span class=\"token punctuation\">,</span>\n    career<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'111'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token parameter\">draftState</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  draftState<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>hhh<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n  draftState<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>career<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'222'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个参考自 yck 大佬的文章，有兴趣的可以去看<a href=\"https://juejin.cn/post/6844904021627502599\">原文</a></p>\n<p>参考：</p>\n<p><a href=\"https://yanhaijing.com/javascript/2018/10/10/clone-deep\">https://yanhaijing.com/javascript/2018/10/10/clone-deep</a></p>\n","more":"<h3 id=\"1-最基本的\"><a href=\"#1-最基本的\" class=\"headerlink\" title=\"1. 最基本的\"></a>1. 最基本的</h3><h3 id=\"2-JSON-parse-JSON-stringify\"><a href=\"#2-JSON-parse-JSON-stringify\" class=\"headerlink\" title=\"2. JSON.parse + JSON.stringify\"></a>2. JSON.parse + JSON.stringify</h3><h3 id=\"3-解决递归爆栈\"><a href=\"#3-解决递归爆栈\" class=\"headerlink\" title=\"3. 解决递归爆栈\"></a>3. 解决递归爆栈</h3><h3 id=\"4-解决循环引用\"><a href=\"#4-解决循环引用\" class=\"headerlink\" title=\"4. 解决循环引用\"></a>4. 解决循环引用</h3><h3 id=\"5-高性能版\"><a href=\"#5-高性能版\" class=\"headerlink\" title=\"5. 高性能版\"></a>5. 高性能版</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_IMMER</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-immer1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isPlainObject</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span>value <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'[object Object]'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">var</span> Ctor <span class=\"token operator\">=</span> <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">,</span> <span class=\"token string\">'constructor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> proto<span class=\"token punctuation\">.</span>constructor\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> Ctor <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span>\n    Ctor <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Ctor</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n      <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProxy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">[</span><span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">baseState<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> proxies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> objectTraps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> target\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> target\n      <span class=\"token keyword\">return</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">getCopy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 这里的判断用于拿 proxy 的 target</span>\n      <span class=\"token comment\">// 否则直接 copy[key] = newValue 的话外部拿到的对象是个 proxy</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> newValue<span class=\"token punctuation\">[</span><span class=\"token constant\">MY_IMMER</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> newValue\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getProxy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isProxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> data\n    <span class=\"token punctuation\">&#125;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> proxies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> objectTraps<span class=\"token punctuation\">)</span>\n      proxies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> proxy\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCopy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>copies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">&#125;</span>\n    copies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> copy<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> copy\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proxies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> copies<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">finalize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isChange</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> data\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token function\">getCopy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copies'</span><span class=\"token punctuation\">,</span> copies<span class=\"token punctuation\">)</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> copy\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">getProxy</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span>baseState<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  info<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'yck'</span><span class=\"token punctuation\">,</span>\n    career<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      first<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'111'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token parameter\">draftState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  draftState<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>hhh<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span>\n  draftState<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>career<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'222'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个参考自 yck 大佬的文章，有兴趣的可以去看<a href=\"https://juejin.cn/post/6844904021627502599\">原文</a></p>\n<p>参考：</p>\n<p><a href=\"https://yanhaijing.com/javascript/2018/10/10/clone-deep\">https://yanhaijing.com/javascript/2018/10/10/clone-deep</a></p>\n","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}