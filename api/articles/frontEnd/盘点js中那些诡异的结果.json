{"title":"盘点 js 中那些诡异的结果","slug":"frontEnd/盘点js中那些诡异的结果","date":"2021-01-28T15:57:57.000Z","updated":"2022-04-05T16:05:50.526Z","comments":true,"path":"api/articles/frontEnd/盘点js中那些诡异的结果.json","excerpt":null,"covers":null,"content":"<pre><code>本文中涉及到的知识，很多都是比较冷门，在实际编码中你可能用不到，但保不准有些面试官可能会问到，或者你可以拿来zb。</code></pre>\n<h3 id=\"1-typeof-null\"><a href=\"#1-typeof-null\" class=\"headerlink\" title=\"1. typeof null\"></a>1. typeof null</h3><p>这个是历史遗留的bug，typeof null 值为”object”</p>\n<h3 id=\"2-null-undefined\"><a href=\"#2-null-undefined\" class=\"headerlink\" title=\"2. null == undefined\"></a>2. null == undefined</h3><p>值为true</p>\n<h3 id=\"3-0-0\"><a href=\"#3-0-0\" class=\"headerlink\" title=\"3. -0 === +0\"></a>3. -0 === +0</h3><p>值为true，但是Object.is(-0, +0)为false</p>\n<h3 id=\"4-Infinity-0\"><a href=\"#4-Infinity-0\" class=\"headerlink\" title=\"4. Infinity * 0\"></a>4. Infinity * 0</h3><p>值为NaN，类似的还有Infinity / Infinity = NaN，Infinity % 0 = NaN，Infinity + (-Infinity) = NaN， </p>\n<h3 id=\"5-‘a’-lt-3\"><a href=\"#5-‘a’-lt-3\" class=\"headerlink\" title=\"5. ‘a’ < 3\"></a>5. ‘a’ &lt; 3</h3><p>值为false，这是因为字符串和数字作比较时，字符串会转化为数值，而’a’转化后的值为NaN，而NaN &lt; 3的值为false，但你以为这样’a’ &gt;= 3就为true了吗？no，’a’ &gt;= 3也为false，这是因为有一个规则，即任何关系操作符在涉及比较NaN时都返回false。</p>\n<h3 id=\"6-NaN-NaN\"><a href=\"#6-NaN-NaN\" class=\"headerlink\" title=\"6. NaN == NaN\"></a>6. NaN == NaN</h3><p>值为false，NaN不是表示某一个具体的数。</p>\n<h3 id=\"7-window-isNaN-Number-isNaN\"><a href=\"#7-window-isNaN-Number-isNaN\" class=\"headerlink\" title=\"7. window.isNaN != Number.isNaN\"></a>7. window.isNaN != Number.isNaN</h3><p>值为true，window.isNaN在早期判断时存在一个bug，比如window.isNaN(‘a’) = true，后来在es6中修复了这个bug，Number.isNaN(‘a’) = false。</p>\n<h3 id=\"8-typeof-Function-prototype\"><a href=\"#8-typeof-Function-prototype\" class=\"headerlink\" title=\"8. typeof Function.prototype\"></a>8. typeof Function.prototype</h3><p>值为”function”，因为Function.prototype是原生方法。</p>\n<h3 id=\"9-Array-isArray-Array-prototype\"><a href=\"#9-Array-isArray-Array-prototype\" class=\"headerlink\" title=\"9. Array.isArray(Array.prototype)\"></a>9. Array.isArray(Array.prototype)</h3><p>值为true，数组的原型也是数组</p>\n<h3 id=\"10-function-fun-fun-instanceof-Function\"><a href=\"#10-function-fun-fun-instanceof-Function\" class=\"headerlink\" title=\"10. function fun () {}; fun instanceof Function\"></a>10. function fun () {}; fun instanceof Function</h3><p>值为true，那<strong>fun instanceof Object</strong>呢？值也为true。关于Object和Function的前世今生，后面会再写一篇文章来说明。</p>\n<h3 id=\"11-Math-max-‘a’-‘b’\"><a href=\"#11-Math-max-‘a’-‘b’\" class=\"headerlink\" title=\"11. Math.max(‘a’, ‘b’)\"></a>11. Math.max(‘a’, ‘b’)</h3><p>值为NaN</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12. [] == ![]\"></a>12. [] == ![]</h3><p>值为true，这个题目有一次在笔试的时候被考到过。分析一下，这里涉及到隐式类型转换，首先![]=false,变为[] == false，如果有一操作数为布尔值时，将其转化为number，则变为[] == 0，然后将左边也转换为number，左边是对象，先调用valueOf方法，转换的值为[]，不是原始值，所以继续调用toString方法，得到的值为空字符串””，转换为number为0，最终得到0 == 0。</p>\n<p>暂时想到这些，后面有补充再更新。如有疑问，欢迎评论区讨论。</p>\n","more":"<pre><code>本文中涉及到的知识，很多都是比较冷门，在实际编码中你可能用不到，但保不准有些面试官可能会问到，或者你可以拿来zb。</code></pre>\n<h3 id=\"1-typeof-null\"><a href=\"#1-typeof-null\" class=\"headerlink\" title=\"1. typeof null\"></a>1. typeof null</h3><p>这个是历史遗留的bug，typeof null 值为”object”</p>\n<h3 id=\"2-null-undefined\"><a href=\"#2-null-undefined\" class=\"headerlink\" title=\"2. null == undefined\"></a>2. null == undefined</h3><p>值为true</p>\n<h3 id=\"3-0-0\"><a href=\"#3-0-0\" class=\"headerlink\" title=\"3. -0 === +0\"></a>3. -0 === +0</h3><p>值为true，但是Object.is(-0, +0)为false</p>\n<h3 id=\"4-Infinity-0\"><a href=\"#4-Infinity-0\" class=\"headerlink\" title=\"4. Infinity * 0\"></a>4. Infinity * 0</h3><p>值为NaN，类似的还有Infinity / Infinity = NaN，Infinity % 0 = NaN，Infinity + (-Infinity) = NaN， </p>\n<h3 id=\"5-‘a’-lt-3\"><a href=\"#5-‘a’-lt-3\" class=\"headerlink\" title=\"5. ‘a’ &lt; 3\"></a>5. ‘a’ &lt; 3</h3><p>值为false，这是因为字符串和数字作比较时，字符串会转化为数值，而’a’转化后的值为NaN，而NaN &lt; 3的值为false，但你以为这样’a’ &gt;= 3就为true了吗？no，’a’ &gt;= 3也为false，这是因为有一个规则，即任何关系操作符在涉及比较NaN时都返回false。</p>\n<h3 id=\"6-NaN-NaN\"><a href=\"#6-NaN-NaN\" class=\"headerlink\" title=\"6. NaN == NaN\"></a>6. NaN == NaN</h3><p>值为false，NaN不是表示某一个具体的数。</p>\n<h3 id=\"7-window-isNaN-Number-isNaN\"><a href=\"#7-window-isNaN-Number-isNaN\" class=\"headerlink\" title=\"7. window.isNaN != Number.isNaN\"></a>7. window.isNaN != Number.isNaN</h3><p>值为true，window.isNaN在早期判断时存在一个bug，比如window.isNaN(‘a’) = true，后来在es6中修复了这个bug，Number.isNaN(‘a’) = false。</p>\n<h3 id=\"8-typeof-Function-prototype\"><a href=\"#8-typeof-Function-prototype\" class=\"headerlink\" title=\"8. typeof Function.prototype\"></a>8. typeof Function.prototype</h3><p>值为”function”，因为Function.prototype是原生方法。</p>\n<h3 id=\"9-Array-isArray-Array-prototype\"><a href=\"#9-Array-isArray-Array-prototype\" class=\"headerlink\" title=\"9. Array.isArray(Array.prototype)\"></a>9. Array.isArray(Array.prototype)</h3><p>值为true，数组的原型也是数组</p>\n<h3 id=\"10-function-fun-fun-instanceof-Function\"><a href=\"#10-function-fun-fun-instanceof-Function\" class=\"headerlink\" title=\"10. function fun () {}; fun instanceof Function\"></a>10. function fun () {}; fun instanceof Function</h3><p>值为true，那<strong>fun instanceof Object</strong>呢？值也为true。关于Object和Function的前世今生，后面会再写一篇文章来说明。</p>\n<h3 id=\"11-Math-max-‘a’-‘b’\"><a href=\"#11-Math-max-‘a’-‘b’\" class=\"headerlink\" title=\"11. Math.max(‘a’, ‘b’)\"></a>11. Math.max(‘a’, ‘b’)</h3><p>值为NaN</p>\n<h3 id=\"12\"><a href=\"#12\" class=\"headerlink\" title=\"12. [] == ![]\"></a>12. [] == ![]</h3><p>值为true，这个题目有一次在笔试的时候被考到过。分析一下，这里涉及到隐式类型转换，首先![]=false,变为[] == false，如果有一操作数为布尔值时，将其转化为number，则变为[] == 0，然后将左边也转换为number，左边是对象，先调用valueOf方法，转换的值为[]，不是原始值，所以继续调用toString方法，得到的值为空字符串””，转换为number为0，最终得到0 == 0。</p>\n<p>暂时想到这些，后面有补充再更新。如有疑问，欢迎评论区讨论。</p>\n","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}